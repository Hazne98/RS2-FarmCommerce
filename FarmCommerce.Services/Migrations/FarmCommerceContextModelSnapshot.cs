// <auto-generated />
using System;
using FarmCommerce.Services.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FarmCommerce.Services.Migrations
{
    [DbContext(typeof(FarmCommerceContext))]
    partial class FarmCommerceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FarmCommerce.Services.Database.Favoriti", b =>
                {
                    b.Property<int>("FavoritId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FavoritId"));

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<int>("ProizvodId")
                        .HasColumnType("int");

                    b.HasKey("FavoritId")
                        .HasName("PK__Favoriti__C32DB3CC3F9A80DC");

                    b.HasIndex("KorisnikId");

                    b.HasIndex("ProizvodId");

                    b.ToTable("Favoriti", (string)null);
                });

            modelBuilder.Entity("FarmCommerce.Services.Database.Kategorija", b =>
                {
                    b.Property<int>("KategorijaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KategorijaId"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("KategorijaId")
                        .HasName("PK__Kategori__6C3B8FEE95792C7A");

                    b.ToTable("Kategorija", (string)null);
                });

            modelBuilder.Entity("FarmCommerce.Services.Database.KorisniciUloge", b =>
                {
                    b.Property<int>("KorisnikUlogaId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DatumIzmjene")
                        .HasColumnType("datetime");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<int>("UlogaId")
                        .HasColumnType("int");

                    b.HasKey("KorisnikUlogaId")
                        .HasName("PK__Korisnic__1608726E077EA99B");

                    b.HasIndex("KorisnikId");

                    b.HasIndex("UlogaId");

                    b.ToTable("KorisniciUloge", (string)null);
                });

            modelBuilder.Entity("FarmCommerce.Services.Database.Korisnik", b =>
                {
                    b.Property<int>("KorisnikId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KorisnikId"));

                    b.Property<string>("Adresa")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Grad")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("KorisnickoIme")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Korisnicko_ime");

                    b.Property<string>("Lozinka")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LozinkaHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LozinkaSalt")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte[]>("Slika")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("KorisnikId")
                        .HasName("PK__Korisnik__80B06D410E14514F");

                    b.HasIndex(new[] { "KorisnickoIme" }, "UQ__Korisnik__5F72E44814CD3ABF")
                        .IsUnique();

                    b.ToTable("Korisnik", (string)null);
                });

            modelBuilder.Entity("FarmCommerce.Services.Database.Lokacija", b =>
                {
                    b.Property<int>("LokacijaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LokacijaId"));

                    b.Property<string>("Adresa")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Grad")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Slika")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("LokacijaId")
                        .HasName("PK__Lokacija__49DE2CCA29B98E57");

                    b.ToTable("Lokacija", (string)null);
                });

            modelBuilder.Entity("FarmCommerce.Services.Database.Narudzba", b =>
                {
                    b.Property<int>("NarudzbaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NarudzbaId"));

                    b.Property<decimal>("Cijena")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime>("DatumNarudzbe")
                        .HasColumnType("date")
                        .HasColumnName("Datum_narudzbe");

                    b.Property<int>("Kolicina")
                        .HasColumnType("int");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<int>("ProizvodId")
                        .HasColumnType("int");

                    b.Property<string>("StatusNarudzbe")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Status_narudzbe");

                    b.HasKey("NarudzbaId")
                        .HasName("PK__Narudzba__FBEC1377BCC6D1CD");

                    b.HasIndex("KorisnikId");

                    b.HasIndex("ProizvodId");

                    b.ToTable("Narudzba", (string)null);
                });

            modelBuilder.Entity("FarmCommerce.Services.Database.Oprema", b =>
                {
                    b.Property<int>("OpremaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OpremaId"));

                    b.Property<decimal>("CijenaPoDanu")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("Cijena_po_danu");

                    b.Property<string>("ImeOpreme")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("KategorijaId")
                        .HasColumnType("int");

                    b.Property<int>("KolicinaNaStanju")
                        .HasColumnType("int")
                        .HasColumnName("Kolicina_na_stanju");

                    b.Property<int>("LokacijaId")
                        .HasColumnType("int");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProizvodjacId")
                        .HasColumnType("int");

                    b.Property<string>("SlikaOpreme")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Slika_Opreme");

                    b.HasKey("OpremaId")
                        .HasName("PK__Oprema__5C2EDCD1368C7B19");

                    b.HasIndex("KategorijaId");

                    b.HasIndex("LokacijaId");

                    b.HasIndex("ProizvodjacId");

                    b.ToTable("Oprema", (string)null);
                });

            modelBuilder.Entity("FarmCommerce.Services.Database.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("Cijena")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime>("DatumPlacanja")
                        .HasColumnType("datetime")
                        .HasColumnName("Datum_placanja");

                    b.Property<int>("Kolicina")
                        .HasColumnType("int");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<string>("NacinPlacanja")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Nacin_placanja");

                    b.Property<int>("RezervacijaId")
                        .HasColumnType("int");

                    b.Property<string>("StatusPlacanja")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Status_placanja");

                    b.HasKey("PaymentId")
                        .HasName("PK__Payment__9B556A380935D356");

                    b.HasIndex("KorisnikId");

                    b.HasIndex("RezervacijaId");

                    b.ToTable("Payment", (string)null);
                });

            modelBuilder.Entity("FarmCommerce.Services.Database.Proizvod", b =>
                {
                    b.Property<int>("ProizvodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProizvodId"));

                    b.Property<decimal>("Cijena")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("ImeProizvoda")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("KategorijaId")
                        .HasColumnType("int");

                    b.Property<int>("KolicinaNaStanju")
                        .HasColumnType("int")
                        .HasColumnName("Kolicina_na_stanju");

                    b.Property<string>("Opis")
                        .HasColumnType("text");

                    b.Property<int>("ProizvodjacId")
                        .HasColumnType("int");

                    b.Property<string>("SlikaProizvoda")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Slika_Proizvoda");

                    b.Property<string>("StateMachine")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProizvodId")
                        .HasName("PK__Proizvod__21A8BFF872E17312");

                    b.HasIndex("KategorijaId");

                    b.HasIndex("ProizvodjacId");

                    b.ToTable("Proizvod", (string)null);
                });

            modelBuilder.Entity("FarmCommerce.Services.Database.Proizvodjac", b =>
                {
                    b.Property<int>("ProizvodjacId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProizvodjacId"));

                    b.Property<string>("Adresa")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("BrojMobitela")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Broj_mobitela");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Grad")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ImeProizvodjaca")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Logo")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("ProizvodjacId")
                        .HasName("PK__Proizvod__3722E595436F76AB");

                    b.ToTable("Proizvodjac", (string)null);
                });

            modelBuilder.Entity("FarmCommerce.Services.Database.Recenzija", b =>
                {
                    b.Property<int>("RecenzijaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecenzijaId"));

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime");

                    b.Property<string>("Komentar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<int>("Ocjena")
                        .HasColumnType("int");

                    b.Property<int>("ProizvodId")
                        .HasColumnType("int");

                    b.HasKey("RecenzijaId")
                        .HasName("PK__Recenzij__D36C607035DAF4D0");

                    b.HasIndex("KorisnikId");

                    b.HasIndex("ProizvodId");

                    b.ToTable("Recenzija", (string)null);
                });

            modelBuilder.Entity("FarmCommerce.Services.Database.Rezervacija", b =>
                {
                    b.Property<int>("RezervacijaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RezervacijaId"));

                    b.Property<double>("Cijena")
                        .HasColumnType("float");

                    b.Property<DateTime>("DatumPocetka")
                        .HasColumnType("date")
                        .HasColumnName("Datum_pocetka");

                    b.Property<DateTime>("DatumZavrsetka")
                        .HasColumnType("date")
                        .HasColumnName("Datum_zavrsetka");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<int>("LokacijaId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("RezervacijaId")
                        .HasName("PK__Rezervac__CABA44DD69561097");

                    b.HasIndex("KorisnikId");

                    b.HasIndex("LokacijaId");

                    b.ToTable("Rezervacija", (string)null);
                });

            modelBuilder.Entity("FarmCommerce.Services.Database.Uloge", b =>
                {
                    b.Property<int>("UlogaId")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UlogaId")
                        .HasName("PK__Uloge__DCAB23CBD9166811");

                    b.ToTable("Uloge", (string)null);
                });

            modelBuilder.Entity("FarmCommerce.Services.Database.Favoriti", b =>
                {
                    b.HasOne("FarmCommerce.Services.Database.Korisnik", "Korisnik")
                        .WithMany("Favoritis")
                        .HasForeignKey("KorisnikId")
                        .IsRequired()
                        .HasConstraintName("FK_Favoriti_Korisnik");

                    b.HasOne("FarmCommerce.Services.Database.Proizvod", "Proizvod")
                        .WithMany("Favoritis")
                        .HasForeignKey("ProizvodId")
                        .IsRequired()
                        .HasConstraintName("FK_Favoriti_Proizvod");

                    b.Navigation("Korisnik");

                    b.Navigation("Proizvod");
                });

            modelBuilder.Entity("FarmCommerce.Services.Database.KorisniciUloge", b =>
                {
                    b.HasOne("FarmCommerce.Services.Database.Korisnik", "Korisnik")
                        .WithMany("KorisniciUloges")
                        .HasForeignKey("KorisnikId")
                        .IsRequired()
                        .HasConstraintName("FK__Korisnici__Koris__5EBF139D");

                    b.HasOne("FarmCommerce.Services.Database.Uloge", "Uloga")
                        .WithMany("KorisniciUloges")
                        .HasForeignKey("UlogaId")
                        .IsRequired()
                        .HasConstraintName("FK__Korisnici__Uloga__5FB337D6");

                    b.Navigation("Korisnik");

                    b.Navigation("Uloga");
                });

            modelBuilder.Entity("FarmCommerce.Services.Database.Narudzba", b =>
                {
                    b.HasOne("FarmCommerce.Services.Database.Korisnik", "Korisnik")
                        .WithMany("Narudzbas")
                        .HasForeignKey("KorisnikId")
                        .IsRequired()
                        .HasConstraintName("FK_Narudzba_Korisnik");

                    b.HasOne("FarmCommerce.Services.Database.Proizvod", "Proizvod")
                        .WithMany("Narudzbas")
                        .HasForeignKey("ProizvodId")
                        .IsRequired()
                        .HasConstraintName("FK_Narudzba_Proizvod");

                    b.Navigation("Korisnik");

                    b.Navigation("Proizvod");
                });

            modelBuilder.Entity("FarmCommerce.Services.Database.Oprema", b =>
                {
                    b.HasOne("FarmCommerce.Services.Database.Kategorija", "Kategorija")
                        .WithMany("Opremas")
                        .HasForeignKey("KategorijaId")
                        .IsRequired()
                        .HasConstraintName("FK__Oprema__Kategori__48CFD27E");

                    b.HasOne("FarmCommerce.Services.Database.Lokacija", "Lokacija")
                        .WithMany("Opremas")
                        .HasForeignKey("LokacijaId")
                        .IsRequired()
                        .HasConstraintName("FK__Oprema__Lokacija__4AB81AF0");

                    b.HasOne("FarmCommerce.Services.Database.Proizvodjac", "Proizvodjac")
                        .WithMany("Opremas")
                        .HasForeignKey("ProizvodjacId")
                        .IsRequired()
                        .HasConstraintName("FK__Oprema__Proizvod__49C3F6B7");

                    b.Navigation("Kategorija");

                    b.Navigation("Lokacija");

                    b.Navigation("Proizvodjac");
                });

            modelBuilder.Entity("FarmCommerce.Services.Database.Payment", b =>
                {
                    b.HasOne("FarmCommerce.Services.Database.Korisnik", "Korisnik")
                        .WithMany("Payments")
                        .HasForeignKey("KorisnikId")
                        .IsRequired()
                        .HasConstraintName("FK__Payment__Korisni__440B1D61");

                    b.HasOne("FarmCommerce.Services.Database.Rezervacija", "Rezervacija")
                        .WithMany("Payments")
                        .HasForeignKey("RezervacijaId")
                        .IsRequired()
                        .HasConstraintName("FK__Payment__Rezerva__4316F928");

                    b.Navigation("Korisnik");

                    b.Navigation("Rezervacija");
                });

            modelBuilder.Entity("FarmCommerce.Services.Database.Proizvod", b =>
                {
                    b.HasOne("FarmCommerce.Services.Database.Kategorija", "KategorijaNavigation")
                        .WithMany("Proizvods")
                        .HasForeignKey("KategorijaId")
                        .IsRequired()
                        .HasConstraintName("FK_Proizvod_Kategorija");

                    b.HasOne("FarmCommerce.Services.Database.Proizvodjac", "Proizvodjac")
                        .WithMany("Proizvods")
                        .HasForeignKey("ProizvodjacId")
                        .IsRequired()
                        .HasConstraintName("FK__Proizvod__Proizv__29572725");

                    b.Navigation("KategorijaNavigation");

                    b.Navigation("Proizvodjac");
                });

            modelBuilder.Entity("FarmCommerce.Services.Database.Recenzija", b =>
                {
                    b.HasOne("FarmCommerce.Services.Database.Korisnik", "Korisnik")
                        .WithMany("Recenzijas")
                        .HasForeignKey("KorisnikId")
                        .IsRequired()
                        .HasConstraintName("FK__Recenzija__Koris__300424B4");

                    b.HasOne("FarmCommerce.Services.Database.Proizvod", "Proizvod")
                        .WithMany("Recenzijas")
                        .HasForeignKey("ProizvodId")
                        .IsRequired()
                        .HasConstraintName("FK__Recenzija__Proiz__2F10007B");

                    b.Navigation("Korisnik");

                    b.Navigation("Proizvod");
                });

            modelBuilder.Entity("FarmCommerce.Services.Database.Rezervacija", b =>
                {
                    b.HasOne("FarmCommerce.Services.Database.Korisnik", "Korisnik")
                        .WithMany("Rezervacijas")
                        .HasForeignKey("KorisnikId")
                        .IsRequired()
                        .HasConstraintName("FK_Rezervacija_Korisnik");

                    b.HasOne("FarmCommerce.Services.Database.Lokacija", "Lokacija")
                        .WithMany("Rezervacijas")
                        .HasForeignKey("LokacijaId")
                        .IsRequired()
                        .HasConstraintName("FK_Rezervacija_Lokacija");

                    b.Navigation("Korisnik");

                    b.Navigation("Lokacija");
                });

            modelBuilder.Entity("FarmCommerce.Services.Database.Kategorija", b =>
                {
                    b.Navigation("Opremas");

                    b.Navigation("Proizvods");
                });

            modelBuilder.Entity("FarmCommerce.Services.Database.Korisnik", b =>
                {
                    b.Navigation("Favoritis");

                    b.Navigation("KorisniciUloges");

                    b.Navigation("Narudzbas");

                    b.Navigation("Payments");

                    b.Navigation("Recenzijas");

                    b.Navigation("Rezervacijas");
                });

            modelBuilder.Entity("FarmCommerce.Services.Database.Lokacija", b =>
                {
                    b.Navigation("Opremas");

                    b.Navigation("Rezervacijas");
                });

            modelBuilder.Entity("FarmCommerce.Services.Database.Proizvod", b =>
                {
                    b.Navigation("Favoritis");

                    b.Navigation("Narudzbas");

                    b.Navigation("Recenzijas");
                });

            modelBuilder.Entity("FarmCommerce.Services.Database.Proizvodjac", b =>
                {
                    b.Navigation("Opremas");

                    b.Navigation("Proizvods");
                });

            modelBuilder.Entity("FarmCommerce.Services.Database.Rezervacija", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("FarmCommerce.Services.Database.Uloge", b =>
                {
                    b.Navigation("KorisniciUloges");
                });
#pragma warning restore 612, 618
        }
    }
}
